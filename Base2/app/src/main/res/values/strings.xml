<resources>
    <string name="app_name">BaseС#</string>
    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>
    <string name="nav_header_title">C#Base Шпаргалка</string>
    <string name="nav_header_subtitle">android.studio@android.com</string>
    <string name="nav_header_desc">Navigation header</string>
    <string name="action_settings">Settings</string>

    <string name="variables">Переменные</string>
    <string name="dataTypes">Массивы</string>
    <string name="comparisons">Сравнения</string>

    <string name="information">Точкой входа в программу на языке C# является метод Main.
        При создании проекта консольного приложения в Visual Studio.По умолчанию метод Main размещается в классе Program.
        Название класса может быть любым. Но метод Main является обязательной частью консольного приложения.
        Если мы изменим его название, то программа не скомпилируется.
        По сути и класс, и метод представляют своего рода блок кода: блок метода помещается в блок класса.
        Внутри блока метода Main располагаются выполняемые в программе инструкции.Регистрозависимость
        C# является регистрозависимым языком.
        Это значит, в зависимости от регистра символов какое-то определенные названия может представлять разные
        классы, методы, переменные и т.д. Например, название обязательного метода Main начинается именно с большой
        буквы: "Main". Если мы назовем метод "main", то программа не скомпилируется, так как метод,
        который представляет стартовую точку в приложении, обязательно должен называться "Main", а не "main" или "MAIN".
        Важной частью программного кода являются комментарии. Они не являются собственно частью
        программы, при компиляции они игнорируются. Тем не менее комментарии делают код программы более понятным,
        помогая понять те или иные его части.
        есть два типа комментариев: однострочный и многострочный.
        Однострочный комментарий размещается на одной строке после двойного слеша.
        А многострочный комментарий заключается между символами .
        Он может размещаться на нескольких строках.Начиная с версии C# 9.0 (.NET 5) добавлена возможность
        создавать программы верхнего уровня. То есть, если у нас программа состоит из одного метода Main,
        то мы можем убрать из определения программы объявление пространства имен (namespace HelloApp),
        объявление класса (class Program) и объявление метода Main (static void Main(string[] args))
        и оставить только директивы using с подключаемыми пространствами имен и собственно исполняемые инструкции.
        Например, выше в предыдущем листинге кода программа запрашивала ввод имени пользователя.
        Фактически все тело программы состоит из метода Main, поэтому мы ее можем сократить.</string>
    <string name="information2">Вначале идет тип переменной, потом ее имя.
        В качестве имени переменной может выступать любое произвольное название, которое удовлетворяет следующим требованиям:
        имя может содержать любые цифры, буквы и символ подчеркивания,
        при этом первый символ в имени должен быть буквой или символом подчеркивания
        в имени не должно быть знаков пунктуации и пробелов
        имя не может быть ключевым словом языка C#.
        Таких слов не так много, и при работе в Visual Studio среда разработки подсвечивает ключевые слова синим цветом.
        Хотя имя переменой может быть любым, но следует давать переменным описательные имена,
        которые будут говорить об их предназначении.</string>
    <string name="information3">Литералы представляют неизменяемые значения (иногда их еще называют константами).
        Литералы можно передавать переменным в качестве значения. Литералы бывают логическими, целочисленными, вещественными,
        символьными и строчными. И отдельный литерал представляет ключевое слово null.
        Логические литералы
        Есть две логических константы - true (истина) и false (ложь):</string>
    <string name="info_dataTypes">Bool хранит значение true или false (логические литералы).
        Представлен системным типом System.Boolean</string>
    <string name="info_dataTypes2">int  хранит целое число от -2147483648 до 2147483647 и занимает 4 байта.
        Представлен системным типом System.Int32.
        Все целочисленные литералы по умолчанию представляют значения типа int:</string>
    <string name="info_dataTypes3">long хранит целое число от
        –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807
        и занимает 8 байт.
        Представлен системным типом System.Int64</string>
    <string name="info_dataTypes4">float хранит число с плавающей точкой от -3.4*1038 до 3.4*1038 и занимает 4 байта.
        Представлен системным типом System.Single</string>
    <string name="info_dataTypes5">double хранит число с плавающей точкой от ±5.0*10-324 до
        ±1.7*10308 и занимает 8 байта. Представлен системным типом System.Double</string>

</resources>